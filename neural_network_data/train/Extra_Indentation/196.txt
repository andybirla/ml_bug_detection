 import numpy as np
 import pandas as pd
 import matplotlib.pyplot as plt
 import seaborn as sns
 from sklearn.model_selection import train_test_split
 from sklearn.neighbors import KNeighborsClassifier
 from sklearn import metrics
 from sklearn.datasets import load_iris
 iris = load_iris()
 type(iris)
 iris = pd.DataFrame(data= np.c_[iris['data'], iris['target']],
                      columns= iris['feature_names'] + ['target'])
 iris.head()
 sns.scatterplot(x='sepal length (cm)', y='sepal width (cm)', data=iris, hue='target', palette="deep")
 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
 k_range = list(range(1,26))
 scores = []
 for k in k_range:
     knn = KNeighborsClassifier(n_neighbors=k)
     knn.fit(X_train, y_train)
     y_pred = knn.predict(X_test)
     scores.append(metrics.accuracy_score(y_test, y_pred))
 plt.plot(k_range, scores)
 plt.xlabel('Value of k')
 plt.ylabel('Accuracy Score')
 plt.title('Accuracy Scores for different values of k')
 plt.show()
 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=0)
 k_range = list(range(1,26))
 scores = []
 for k in k_range:
     knn = KNeighborsClassifier(n_neighbors=k)
     knn.fit(X_train, y_train)
     y_pred = knn.predict(X_test)
     scores.append(metrics.accuracy_score(y_test, y_pred))
 plt.plot(k_range, scores)
 plt.xlabel('Value of k')
 plt.ylabel('Accuracy Score')
 plt.title('Accuracy Scores for different values of k')
 plt.show()
 knn = KNeighborsClassifier(n_neighbors=11)
 knn.fit(iris.drop(['target'], axis=1), iris['target'])
 X_new = np.array([[1, 2.9, 10, 0.2]])
 prediction = knn.predict(X_new)
 print(prediction)
 if prediction[0] == 0.0:
   print('Setosa')
 elif prediction[0] == 1.0:
   print('Versicolor')
 else:
   print('Virginica')
