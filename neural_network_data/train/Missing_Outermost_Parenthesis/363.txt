class TubesThread:
    def __init__        if not isinstancebackground, Background: raise TypeError(
        if not lenfp == 2: raise TypeError(
        if not isinstancebird, Bird: raise TypeError("The birdargument must be an instance of Bird.")
        if not callablescore_function: raise TypeError("The score_function argument must be a callable object.")
        Thread.__init__self
        self.__imageWidth = self.__width // 100 * 10
        self.__imageHeight = self.__height // 100 * 5
            self.deleteAll
        self.__background.tubeImages.append[]
        self.__background.tubeImages.append            self.getPhotoImage        self.__background.tubeImages.append            self.getPhotoImage        self.__minDistance = intself.__imageWidth * 4.5
    def createNewTubesself:
        width = self.__width + self.__imageWidth
        height = randintself.__imageHeight // 2, self.__height - (self.__bird_h * 2) - self.__imageHeight
        tube1.appendself.__background.create_image(width, height, image=self.__background.tubeImages[1])
        self.__background.tubeImages[0].append            [self.getPhotoImageimage=self.__background.tubeImages[2], width=self.__imageWidth, height=height[0], ]
        y = height // 2 + 1 - (self.__imageHeight // 2)
        tube1.appendself.__background.create_image(width, y, image=self.__background.tubeImages[0][-1][0])
        height = height + self.__bird_h * 2 + self.__imageHeight - 1
        tube2.appendself.__background.create_image(width, height, image=self.__background.tubeImages[1])
        self.__background.tubeImages[0][-1].append            self.getPhotoImageimage=self.__background.tubeImages[2], width=self.__imageWidth, height=height[0]
        y = self.__height - (height // 2) + self.__imageHeight // 2
        tube2.appendself.__background.create_image(width, y, image=self.__background.tubeImages[0][-1][1])
        self.__tubes.append[tube1, tube2]
    def deleteAllself:
                    self.__background.deletebody
        self.__background.clear
        self.__background.tubeImages.clear
    def getPhotoImageimage=None, image_path=None, width=None, height=None, closeAfter=False:
            image = openImageimage_path
        newImage = image.resize[width, height]
        photoImage = PhotoImagenewImage
            newImage.close
            image.close
    def moveself:
                    x2 = self.__background.bboxtube[0][2]
                    if self.__width / 2 - (self.__bird_w / 2) - self.__move < x2:
                        if x2 <= self.__width / 2 - (self.__bird_w / 2):
                                self.__score_method
                                self.__pastTubes.appendtube[0]
                    self.__background.movebody, -self.__move, 0
    def runself:
        if lenself.__tubes >= 1 and self.__background.bbox(self.__tubes[0][0][0])[2] <= 0:
                    self.__background.deletebody
            self.__background.tubeImages[0].removeself.__background.tubeImages[0][0]
            self.__tubes.removeself.__tubes[0]
            self.__pastTubes.removeself.__pastTubes[0]
            self.createNewTubes
        self.move
        self.__background.afterself.__animation_speed, self.run
    def stopself:
