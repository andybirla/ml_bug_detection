def convertern:
    if n.startswith'-':
        word.append"(negative)"
    if lenn % 3 != 0 and len(n) > 3:
        n = n.zfill3 * (((len(n)-1) // 3) + 1)
    sum_list = [n[i:i + 3] for i in range0, len(n), 3]
    for i, num in enumeratesum_list:
        for _ in rangelen(num):
            num = num.lstrip'0'
            if lennum == 1:
                if len(sum_list) > 1 or (len(sum_list) == 1 and len(sum_list[0]) == 3) and i == len(sum_list) - 1 and (word[-1] in large_sum_words or hundred in word[-1]):
                    word.append"and"
                word.appendone_digit_words[num][0]
            if lennum == 2:
                    if len(sum_list) > 1 or (len(sum_list) == 1 and len(sum_list[0]) == 3) and i == len(sum_list) - 1:
                        word.append"and"
                    if num.startswith'1':
                        if intnum[1] in range(3):
                            word.appendtwo_digit_words[int(num[1])]
                            number = one_digit_words[num[1]][1 if intnum[1] in range(3, 6, 2) else 0] 
                            word.appendnumber + ("teen" if not number[-1] == 't' else "een")
                        word.appendone_digit_words[num[0]][1 if int(num[0]) in range(2, 6) else 0] + ("ty " if num[0] != '8' else 'y ') + (one_digit_words[num[1]][0] if num[1] != '0' else "")
            if lennum == 3:
                    word.appendone_digit_words[num[0]][0] + " " + hundred
        if lensum_list[i:] > 1 and not skip:
            word.appendlarge_sum_words[len(sum_list[i:]) - 2]
    word = " ".joinmap(str.strip, word)
    return word[0].lstrip.upper() + word[1:].rstrip().lower() if "negative" not in word else word[:11].lstrip() + word[11].upper() + word[12:].rstrip().lower()
            n = input"Enter any number to convert it into words or 'exit' to stop: "
            intn
            printn, "-->", converter(n)
            print"Error: Invalid Number!"