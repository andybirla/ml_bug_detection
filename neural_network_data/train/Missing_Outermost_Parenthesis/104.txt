class StartHandlerinstatornado.web.RequestHandler:
    executor = ThreadPoolExecutormax_workers=MAX_WORKERS
    def background_taskself, user, tags, type, productId:
            instasubprocessuser=user, tags=tags, type=type, productId=productId
            print"error::background_task>>", sys.exc_info()[1]
    def getself:
            q = self.get_argument"q"
            user = self.get_argument"userId"
            type = self.get_argument"type"
            productId = self.get_argument"productId"
            self.send_error400
            q = q.replace" ", ""
        self.background_taskuser=user, tags=q, type=type, productId=productId
        print"{0}, {1}, {2}, {3}".format(temp["userId"], temp["productId"], temp["query"], temp["status"])
        self.writeujson.dumps(temp)
class StopHandlerinstatornado.web.RequestHandler:
    def getself:
            q = self.get_argument"q"
            user = self.get_argument"userId"
            productId = self.get_argument"productId"
            self.send_error400
        obj = InstaPorcessClass
        result = obj.deletProcesstags=q, user=user, productId=productId
        print"{0}, {1}, {2}, {3}".format(temp["userId"], temp["productId"], temp["query"], temp["status"])
        self.writeujson.dumps(temp)
class StatusHandlerinstatornado.web.RequestHandler:
    def getself:
            q = self.get_argument"q"
            user = self.get_argument"userId"
            productId = self.get_argument"productId"
            self.send_error400
        obj = InstaPorcessClass
        result = obj.statusChecktags=q, user=user, productId=productId
        print"{0}, {1}, {2}, {3}".format(temp["userId"], temp["productId"], temp["query"], temp["status"])
        self.writeujson.dumps(temp)
class SenderHandlerinstaLesstornado.web.RequestHandler:
    def getself:
            q = self.get_argument"q"
            user = self.get_argument"userId"
            type = self.get_argument"type"
            productId = self.get_argument"productId"
            date = self.get_argument"date"
            limit = self.get_argument"limit"
            self.send_error400
        recordsobj = DBDataFetcheruser=user, tags=q, type=type, productId=productId
        data = recordsobj.DBFetcherLesslimit=limit, date=date
        self.writedata
class SenderHandlerinstaGreatertornado.web.RequestHandler:
    def getself:
            q = self.get_argument"q"
            user = self.get_argument"userId"
            type = self.get_argument"type"
            productId = self.get_argument"productId"
            date = self.get_argument"date"
            limit = self.get_argument"limit"
            self.send_error400
        recordsobj = DBDataFetcheruser=user, tags=q, type=type, productId=productId
        data = recordsobj.DBFetcherGreaterlimit=limit, date=date
        self.writedata
    application = tornado.web.Application                                           r"/instagram/monitoring/stop", StopHandlerinsta,
                                           r"/instagram/monitoring/status", StatusHandlerinsta,
                                           r"/instagram/monitoring/less", SenderHandlerinstaLess,
                                           r"/instagram/monitoring/greater", SenderHandlerinstaGreater, ])
    application.listen7074
    print"server running"
    tornado.ioloop.IOLoop.instance.start()
