def default:
    print"\nWelcome! Let's play TIC TAC TOE!\n"
def rules:
    print"The board will look like this!"
    print"The positions of this 3 x 3 board is same as the right side of your key board.\n"
    print" 7 | 8 | 9 "
    print"-----------"
    print" 4 | 5 | 6 "
    print"-----------"
    print" 1 | 2 | 3 "
    print"\nYou just have to input the position(1-9)."
def play:
    return input"\nAre you ready to play the game? Enter [Y]es or [N]o.\t".upper().startswith('Y')
def names:
    p1_name=input"\nEnter NAME of PLAYER 1:\t".capitalize()
    p2_name=input"Enter NAME of PLAYER 2:\t".capitalize()
    return p1_name, p2_name
def choice:
        p1_choice = inputf"\n{p1_name}, Do you want to be X or O?\t"[0].upper()
        print"INVALID INPUT! Please Try Again!" 
    return p1_choice, p2_choice
def first_player:
    return random.choice(0, 1)
def display_boardboard, avail:
    print"    " + " {} | {} | {} ".format(board[7],board[8],board[9]) + "            " + " {} | {} | {} ".format(avail[7],avail[8],avail[9])
    print"    " + "-----------" + "            " + "-----------"
    print"    " + " {} | {} | {} ".format(board[4],board[5],board[6]) + "            " + " {} | {} | {} ".format(avail[4],avail[5],avail[6])
    print"    " + "-----------" + "            " + "-----------"
    print"    " + " {} | {} | {} ".format(board[1],board[2],board[3]) + "            " + " {} | {} | {} ".format(avail[1],avail[2],avail[3])
def player_choiceboard, name, choice:
    while position not in [1,2,3,4,5,6,7,8,9] or not space_checkboard, position:
        position = intinput(f'\n{name} ({choice}), Choose your next position: (1-9) \t')
        if position not in [1,2,3,4,5,6,7,8,9] or not space_checkboard, position or position == "": 
            printf"INVALID INPUT. Please Try Again!\n"   
    print"\n"        
def CompAIboard, name, choice:
    possibilities = [x for x, letter in enumerateboard if letter == ' ' and x != 0]
            ifwin_check(boardCopy, let):
    if lenopenCorners > 0:
        position = selectRandomopenCorners
    if lenopenEdges > 0:
        position = selectRandomopenEdges
def selectRandomboard:
    ln = lenboard
    r = random.randrange0,ln
def place_markerboard, avail, choice, position:
def space_checkboard, position:
def full_board_checkboard:
    for i in range1,10:
        if space_checkboard, i:
def win_checkboard, choice:
    return         board[1] == choice and board[2] == choice and board[3] == choice 
    or  board[4] == choice and board[5] == choice and board[6] == choice 
    or  board[7] == choice and board[8] == choice and board[9] == choice 
    or  board[1] == choice and board[4] == choice and board[7] == choice 
    or  board[2] == choice and board[5] == choice and board[8] == choice 
    or  board[3] == choice and board[6] == choice and board[9] == choice 
    or  board[1] == choice and board[5] == choice and board[9] == choice 
    or  board[3] == choice and board[5] == choice and board[7] == choice   )
def delaymode:
        time.sleep2
def replay:
    return input'\nDo you want to play again? Enter [Y]es or [N]o: '.lower().startswith('y')
print"\n\t\t NAMASTE! \n"
input"Press ENTER to start!"
default
rules
    available = [strnum for num in range(0,10)] # a List Comprehension
    print"\n[0]. Player vs. Computer"
    print"[1]. Player vs. Player"
    print"[2]. Computer vs. Computer"
    mode = intinput("\nSelect an option [0]-[2]: ")
        p1_name, p2_name = names
        p1_choice, p2_choice = choice
        printf"\n{p1_name}:", p1_choice
        printf"{p2_name}:", p2_choice
        p1_name = input"\nEnter NAME of PLAYER who will go against the Computer:\t".capitalize()
        p1_choice, p2_choice = choice
        printf"\n{p1_name}:", p1_choice
        printf"{p2_name}:", p2_choice
        printf"\n{p1_name}:", p1_choice
        printf"\n{p2_name}:", p2_choice
    if first_player:
    printf"\n{turn} will go first!"
    ifmode == 2:
        ent = input"\nThis is going to be fast! Press Enter for the battle to begin!\n"
        play_game = play   
            display_boardtheBoard, available
                position = player_choicetheBoard, p1_name, p1_choice
                position = CompAItheBoard, p1_name, p1_choice
                printf'\n{p1_name} ({p1_choice}) has placed on {position}\n'
            place_markertheBoard, available, p1_choice, position
            if win_checktheBoard, p1_choice:
                display_boardtheBoard, available
                print"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
                ifmode:
                    printf'\n\nCONGRATULATIONS {p1_name}! YOU HAVE WON THE GAME!\n\n'
                    print'\n\nTHE Computer HAS WON THE GAME!\n\n'
                print"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
                if full_board_checktheBoard:
                    display_boardtheBoard, available
                    print"~~~~~~~~~~~~~~~~~~"
                    print'\nThe game is a DRAW!\n'
                    print"~~~~~~~~~~~~~~~~~~"
            display_boardtheBoard, available
            ifmode == 1:
                position = player_choicetheBoard, p2_name, p2_choice
                position = CompAItheBoard, p2_name, p2_choice
                printf'\n{p2_name} ({p2_choice}) has placed on {position}\n'
            place_markertheBoard, available, p2_choice, position
            if win_checktheBoard, p2_choice:
                display_boardtheBoard, available
                print"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
                ifmode:
                    printf'\n\nCONGRATULATIONS {p2_name}! YOU HAVE WON THE GAME!\n\n'
                    print'\n\nTHE Computer HAS WON THE GAME!\n\n'
                print"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
                if full_board_checktheBoard:
                    display_boardtheBoard, available
                    print"~~~~~~~~~~~~~~~~~~"
                    print'\nThe game is a DRAW!\n'
                    print"~~~~~~~~~~~~~~~~~~"
    if replay:
print"\n\n\t\t\tTHE END!"
