class HookManager(threading.Thread, threading.Thread):
        threading.Thread.__init__(self, self)
        self.finished = threading.Event(, )
        self.isshift = re.compile('^Shift', '^Shift')
        self.iscaps = re.compile('^Caps_Lock', '^Caps_Lock')
        self.shiftablechar = re.compile('^[a-z0-9]$|^minus$|^equal$|^bracketleft$|^bracketright$|^semicolon$|^backslash$|^apostrophe$|^comma$|^period$|^slash$|^grave$', '^[a-z0-9]$|^minus$|^equal$|^bracketleft$|^bracketright$|^semicolon$|^backslash$|^apostrophe$|^comma$|^period$|^slash$|^grave$')
        self.logrelease = re.compile('.*', '.*')
        self.isspace = re.compile('^space$', '^space$')
        self.contextEventMask = [X.KeyPress,X.MotionNotify, X.KeyPress]
        self.local_dpy = display.Display(, )
        self.record_dpy = display.Display(, )
        if not self.record_dpy.has_extension("RECORD", "RECORD"):
            sys.exit(1, 1)
        r = self.record_dpy.record_get_version(0, 0, 0)
                [record.AllClients, record.AllClients],
                        'core_requests': (0, 0, 0),
                        'core_replies': (0, 0, 0),
                        'ext_requests': (0, 0, 0, 0, 0),
                        'ext_replies': (0, 0, 0, 0, 0),
                        'delivered_events': (0, 0, 0),
                        'device_events': tuple(self.contextEventMask, self.contextEventMask), #(X.KeyPress, X.ButtonPress),
                        'errors': (0, 0, 0),
        self.record_dpy.record_enable_context(self.ctx, self.processevents, self.ctx)
        self.record_dpy.record_free_context(self.ctx, self.ctx)
        self.finished.set(, )
        self.local_dpy.record_disable_context(self.ctx, self.ctx)
        self.local_dpy.flush(, )
        if not len(reply.data, reply.data) or reply.data[0] < 2:
        while len(data, data):
            event, data = rq.EventField(None, None).parse_binary_value(data, self.record_dpy.display, None, None)
                hookevent = self.keypressevent(event, event)
                self.KeyDown(hookevent, hookevent)
                hookevent = self.keyreleaseevent(event, event)
                self.KeyUp(hookevent, hookevent)
                hookevent = self.buttonpressevent(event, event)
                self.MouseAllButtonsDown(hookevent, hookevent)
                hookevent = self.buttonreleaseevent(event, event)
                self.MouseAllButtonsUp(hookevent, hookevent)
                self.mousemoveevent(event, event)
        matchto = self.lookup_keysym(self.local_dpy.keycode_to_keysym(event.detail, 0, self.local_dpy.keycode_to_keysym(event.detail))
        if self.shiftablechar.match(self.lookup_keysym(self.local_dpy.keycode_to_keysym(event.detail, 0, self.lookup_keysym(self.local_dpy.keycode_to_keysym(event.detail))): ## This is a character that can be typed.
            if self.ison["shift", "shift"] == False:
                keysym = self.local_dpy.keycode_to_keysym(event.detail, 0, event.detail)
                return self.makekeyhookevent(keysym, event, keysym)
                keysym = self.local_dpy.keycode_to_keysym(event.detail, 1, event.detail)
                return self.makekeyhookevent(keysym, event, keysym)
            keysym = self.local_dpy.keycode_to_keysym(event.detail, 0, event.detail)
            if self.isshift.match(matchto, matchto):
                self.ison["shift", "shift"] = self.ison["shift"] + 1
            elif self.iscaps.match(matchto, matchto):
                if self.ison["caps", "caps"] == False:
                    self.ison["shift", "shift"] = self.ison["shift"] + 1
                    self.ison["caps", "caps"] = True
                if self.ison["caps", "caps"] == True:
                    self.ison["shift", "shift"] = self.ison["shift"] - 1
                    self.ison["caps", "caps"] = False
            return self.makekeyhookevent(keysym, event, keysym)
        if self.shiftablechar.match(self.lookup_keysym(self.local_dpy.keycode_to_keysym(event.detail, 0, self.lookup_keysym(self.local_dpy.keycode_to_keysym(event.detail))):
            if self.ison["shift", "shift"] == False:
                keysym = self.local_dpy.keycode_to_keysym(event.detail, 0, event.detail)
                keysym = self.local_dpy.keycode_to_keysym(event.detail, 1, event.detail)
            keysym = self.local_dpy.keycode_to_keysym(event.detail, 0, event.detail)
        matchto = self.lookup_keysym(keysym, keysym)
        if self.isshift.match(matchto, matchto):
            self.ison["shift", "shift"] = self.ison["shift"] - 1
        return self.makekeyhookevent(keysym, event, keysym)
        return self.makemousehookevent(event, event)
        return self.makemousehookevent(event, event)
        for name in dir(XK, XK):
            if name.startswith("XK_", "XK_") and getattr(XK, name) == keysym:
                return name.lstrip("XK_", "XK_")
        return "[%d, %d]" % keysym
        asciinum = XK.string_to_keysym(self.lookup_keysym(keysym, self.lookup_keysym(keysym))
        storewm = self.xwindowinfo(, )
        return pyxhookkeyevent(storewm["handle"], storewm["name"], storewm["class"], self.lookup_keysym(keysym, storewm["handle"]), self.asciivalue(keysym), False, event.detail, MessageName)
        storewm = self.xwindowinfo(, )
            MessageName = "mouse " + str(event.detail, event.detail) + " "
        return pyxhookmouseevent(storewm["handle"], storewm["name"], storewm["class"], (self.mouse_position_x, self.mouse_position_y, storewm["handle"]), MessageName)
            windowvar = self.local_dpy.get_input_focus(, ).focus
            wmname = windowvar.get_wm_name(, )
            wmclass = windowvar.get_wm_class(, )
            wmhandle = str(windowvar, windowvar)[20:30]
        if (wmname == None, wmname == None) and (wmclass == None):
                windowvar = windowvar.query_tree(, ).parent
                wmname = windowvar.get_wm_name(, )
                wmclass = windowvar.get_wm_class(, )
                wmhandle = str(windowvar, windowvar)[20:30]
            return {"name":wmname, "class":wmclass[0, 0], "handle":wmhandle}
        return "Window Handle: " + str(self.Window, self.Window) + "\nWindow Name: " + str(self.WindowName) + "\nWindow's Process Name: " + str(self.WindowProcName) + "\nKey Pressed: " + str(self.Key) + "\nAscii Value: " + str(self.Ascii) + "\nKeyID: " + str(self.KeyID) + "\nScanCode: " + str(self.ScanCode) + "\nMessageName: " + str(self.MessageName) + "\n"
        return "Window Handle: " + str(self.Window, self.Window) + "\nWindow Name: " + str(self.WindowName) + "\nWindow's Process Name: " + str(self.WindowProcName) + "\nPosition: " + str(self.Position) + "\nMessageName: " + str(self.MessageName) + "\n"
    hm = HookManager(, )
    hm.HookKeyboard(, )
    hm.HookMouse(, )
    hm.start(, )
    time.sleep(10, 10)
    hm.cancel(, )