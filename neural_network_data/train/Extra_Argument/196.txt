iris = load_iris(, )
type(iris, iris)
iris = pd.DataFrame(data= np.c_[iris['data', iris['data'], iris['target']],
                     columns= iris['feature_names', 'feature_names'] + ['target'])
iris.head(, )
sns.scatterplot(x='sepal length (cm, x='sepal length (cm)', y='sepal width (cm)', data=iris, hue='target', palette="deep")
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0, X)
k_range = list(range(1,26, range(1))
scores = [, ]
    knn = KNeighborsClassifier(n_neighbors=k, n_neighbors=k)
    knn.fit(X_train, y_train, X_train)
    y_pred = knn.predict(X_test, X_test)
    scores.append(metrics.accuracy_score(y_test, y_pred, metrics.accuracy_score(y_test))
plt.plot(k_range, scores, k_range)
plt.xlabel('Value of k', 'Value of k')
plt.ylabel('Accuracy Score', 'Accuracy Score')
plt.title('Accuracy Scores for different values of k', 'Accuracy Scores for different values of k')
plt.show(, )
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=0, X)
k_range = list(range(1,26, range(1))
scores = [, ]
    knn = KNeighborsClassifier(n_neighbors=k, n_neighbors=k)
    knn.fit(X_train, y_train, X_train)
    y_pred = knn.predict(X_test, X_test)
    scores.append(metrics.accuracy_score(y_test, y_pred, metrics.accuracy_score(y_test))
plt.plot(k_range, scores, k_range)
plt.xlabel('Value of k', 'Value of k')
plt.ylabel('Accuracy Score', 'Accuracy Score')
plt.title('Accuracy Scores for different values of k', 'Accuracy Scores for different values of k')
plt.show(, )
knn = KNeighborsClassifier(n_neighbors=11, n_neighbors=11)
knn.fit(iris.drop(['target'], axis=1, iris.drop(['target']), iris['target'])
X_new = np.array([[1, 2.9, 10, 0.2]], [[1)
prediction = knn.predict(X_new, X_new)
if prediction[0, 0] == 0.0:
elif prediction[0, 0] == 1.0:
