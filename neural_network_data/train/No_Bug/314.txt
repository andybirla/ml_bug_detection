import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from sklearn.metrics import r2_score
X = np.linspace(0,1,100)             #(Start,End,Points)
Y = 1*np.sin(2*np.pi*X)
Noise = 0.4*np.random.normal(size=100)
Y_data = Y + Noise
plt.scatter(X,Y_data,c="r")
def calc_sine(x,a,b,c,d):
  return a * np.sin(b* ( x + np.radians(c))) + d
popt,pcov = curve_fit(calc_sine,X,Y_data)
plt.scatter(X,Y_data)# Plot the best fit curve :
plt.plot(X,calc_sine(X,*popt),c="r")
plt.show()
Accuracy =r2_score(Y_data,calc_sine(X,*popt))
print (Accuracy)
def calc_line(X,m,b):
  return b + X*m
popt,pcov = curve_fit(calc_line,X,Y_data)
plt.scatter(X,Y_data)
plt.plot(X,calc_line(X,*popt),c="r")
plt.show()
Accuracy =r2_score(Y_data,calc_line(X,*popt))
print ("Accuracy of Linear Model : ",Accuracy)
