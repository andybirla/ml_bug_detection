import numpy as np
import matplotlib.pyplot as plt
import copy
def sphere(x):
  selection for breeding. We take the cummulative sum of probabilities
  and select the first parent whose cummulative sum is greater than
  random number'''
  c = np.cumsum(p)
  r = sum(p) * np.random.rand()
  ind = np.argwhere(r <= c)
  return ind[0][0]
def crossover(p1, p2):
  c: child chromosome
  mu: mutation rate. % of gene to be modified
  sigma: step size of mutation'''
  y = copy.deepcopy(c)
  flag = np.random.rand(*(c['position'].shape)) <= mu  # array of True and Flase, indicating at which position to perform mutation
  ind = np.argwhere(flag)
  y['position'][ind] += sigma * np.random.randn(*ind.shape)
  return y
def bounds(c, varmin, varmax):
  in every iteration to get best fit individuals at top'''
  n = len(arr)
  for i in range(n-1):
    for j in range(0, n-i-1):
            if arr[j]['cost'] > arr[j+1]['cost'] :
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr
def ga(costfunc, num_var, varmin, varmax, maxit, npop, num_children, mu, sigma, beta):
  population = {}
  for i in range(npop):                                                         # each inidivdual has position(chromosomes) and cost,
    population[i] = {'position': None, 'cost': None}                            # create individual as many as population size(npop)
  bestsol = copy.deepcopy(population)
  bestsol_cost = np.inf                                                         # initial best cost is infinity
  for i in range(npop):
      population[i]['position'] = np.random.uniform(varmin, varmax, num_var)    # randomly initialize the chromosomes and cost
      population[i]['cost'] = costfunc(population[i]['position'])
      if population[i]['cost'] < bestsol_cost:                                  # if cost of an individual is less(best) than best cost,
        bestsol = copy.deepcopy(population[i])                                  # replace the best solution with that individual
  bestcost = np.empty(maxit)
  for it in range(maxit):
    costs = []
    for i in range(len(population)):
      costs.append(population[i]['cost'])                                       # list of all the population cost
    costs = np.array(costs)
    avg_cost = np.mean(costs)                                                   # taking average of the costs
    if avg_cost != 0:
      costs = costs/avg_cost
    probs = np.exp(-beta*costs)                                                 # probability is exponensial of -ve beta times costs
    for _ in range(num_children//2):                                            # we will be having two off springs for each crossover
      p1 = population[roulette_wheel_selection(probs)]
      p2 = population[roulette_wheel_selection(probs)]
      c1, c2 = crossover(p1, p2)
      c1 = mutate(c1, mu, sigma)
      c2 = mutate(c2, mu, sigma)
      bounds(c1, varmin, varmax)
      bounds(c2, varmin, varmax)
      c1['cost'] = costfunc(c1['position'])                                     # calculate cost function of child 1
      if type(bestsol_cost) == float:
        if c1['cost'] < bestsol_cost:                                           # replacing best solution in every generation/iteration
          bestsol_cost = copy.deepcopy(c1)
      else:
        if c1['cost'] < bestsol_cost['cost']:                                   # replacing best solution in every generation/iteration
          bestsol_cost = copy.deepcopy(c1)
      if c2['cost'] < bestsol_cost['cost']:                                     # replacing best solution in every generation/iteration
        bestsol_cost = copy.deepcopy(c2)
    population[len(population)] = c1
    population[len(population)] = c2
    population = sort(population)
    bestcost[it] = bestsol_cost['cost']
    print('Iteration {}: Best Cost = {}'. format(it, bestcost[it]))
  out = population
  Bestsol = bestsol
  bestcost = bestcost
  return (out, Bestsol, bestcost)
costfunc = sphere
num_var = 5       # number of decicion variables
varmin = -10      # lower bound
varmax = 10       # upper bound
maxit = 501                                              # number of iterations
npop = 20                                                # initial population size
beta = 1
prop_children = 1                                        # proportion of children to population
num_children = int(np.round(prop_children * npop/2)*2)   # making sure it always an even number
mu = 0.2                                                 # mutation rate 20%, 205 of 5 is 1, mutating 1 gene
sigma = 0.1                                              # step size of mutation
out = ga(costfunc, num_var, varmin, varmax, maxit, npop, num_children, mu, sigma, beta)
plt.plot(out[2])
plt.xlim(0, maxit)
plt.xlabel('Generations')
plt.ylabel('Best Cost')
plt.title('Genetic Algorithm')
plt.grid(True)
plt.show
