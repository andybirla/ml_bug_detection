import logging
from json.decoder import JSONDecodeError
from pathlib import Path
import pandas as pd
import requests
from requests.exceptions import ProxyError
logging.basicConfig(level=logging.INFO)
def add_proxies_to_file(csv_path: str, proxies: list):
    and tests it against a given iptest adress.'''
    logging.info(f'Testing proxy: {proxy_address}')
    try:
        proxies = {proxy_type: proxy_address}
        proxy_status: str = ''
        if proxy_type == 'https':
            r = requests.get(f'https://{iptest}', proxies=proxies)
        else:
            r = requests.get(f'http://{iptest}', proxies=proxies)
        try:
            json_response: dict = r.json()
            if json_response["ip"] in proxy_address:
                proxy_status = 'Proxy functional'
            else:
                logging.warning(f'Proxy "{proxy_address}"'
                                f'returned {json_response}')
                proxy_status = 'Proxy not functional'
        except JSONDecodeError:
            proxy_status = 'Invalid response'
    except ProxyError:
        proxy_status = 'Proxy error'
    logging.info(f'Proxy {proxy_address}: {proxy_status}')
    return {'proxy_type': proxy_type,
            'proxy_address': proxy_address,
            'proxy_status': proxy_status}
def test_single_proxy(proxy: str, iptest: str, csv_path: str):
    csv_path: Path = Path(csv_path)
    if csv_path.exists():
        pr_file: pd.DataFrame = pd.read_csv(csv_path)
    else:
        raise FileNotFoundError
    proxies: list = []
    for index, proxy in pr_file.iterrows():
        proxies.append(test_proxy(proxy['proxy_type'],
                                  proxy['proxy_address'],
                                  iptest))
    add_proxies_to_file(csv_path, proxies)
def add_from_text_file(iptest: str, text_path: str, csv_path: str):
            and leverage the existing function'''
            test_single_proxy(proxy, iptest, csv_path)
    else:
        raise FileNotFoundError
