   global x
   print('Reader is Reading!')
   lock.acquire()      #Acquire the lock before Reading (mutex approach)
   print('Shared Data:', x)
   lock.release()      #Release the lock after Reading
   print()
   global x
   print('Writer is Writing!')
   lock.acquire()      #Acquire the lock before Writing
   x += 1              #Write on the shared memory
   print('Writer is Releasing the lock!')
   lock.release()      #Release the lock after Writing
   print()
   for i in range(0, 10):
       randomNumber = random.randint(0, 100)   #Generate a Random number between 0 to 100
       if(randomNumber > 50):
           Thread1 = thread.Thread(target = Reader)
           Thread1.start()
       else:
           Thread2 = thread.Thread(target = Writer)
           Thread2.start()
