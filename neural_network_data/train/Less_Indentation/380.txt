   canvas = [[False for i in range(size)] for j in range(size)]
   return canvas
   for i, row in enumerate(canvas):
       for j, _ in enumerate(row):
           canvas[i][j] = bool(random.getrandbits(1))
   canvas = np.array(canvas)
   next_gen_canvas = np.array(create_canvas(canvas.shape[0]))
   for r, row in enumerate(canvas):
       for c, pt in enumerate(row):
           next_gen_canvas[r][c] = __judge_point(pt, canvas[r - 1:r + 2, c - 1:c + 2])
   canvas = next_gen_canvas
   del next_gen_canvas  # cleaning memory as we move on.
   return canvas.tolist()
   dead = 0
   alive = 0
   for i in neighbours:
       for status in i:
           if status:
               alive += 1
           else:
               dead += 1
   if pt:
       alive -= 1
   else:
       dead -= 1
   state = pt
   if pt:
       if alive < 2:
           state = False
       elif alive == 2 or alive == 3:
           state = True
       elif alive > 3:
           state = False
   else:
       if alive == 3:
           state = True
   return state
   if len(sys.argv) != 2: raise Exception(usage_doc)
   canvas_size = int(sys.argv[1])
   c = create_canvas(canvas_size)
   seed(c)
   fig, ax = plt.subplots()
   fig.show()
   cmap = ListedColormap(['w', 'k'])
   try:
       while True:
           c = run(c)
           ax.matshow(c, cmap=cmap)
           fig.canvas.draw()
           ax.cla()
   except KeyboardInterrupt:
       pass
