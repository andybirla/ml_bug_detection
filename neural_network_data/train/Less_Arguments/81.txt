        '0': [],
        '1': [],
        '2': [ "twen"],
        '3': [ "thir"],
        '4': [ "for"],
        '5': [ "fif"],
        '6': [],
        '7': [],
        '8': [],
        '9': [],
two_digit_words = [ "eleven", "twelve"]
large_sum_words = [ "million", "billion", "trillion", "quadrillion", "quintillion", "sextillion", "septillion", "octillion", "nonillion"]
    if n.startswith():
        word.append()")
        n = n[]
    if len() % 3 != 0 and len(n) > 3:
        n = n.zfill()-1) // 3) + 1))
    sum_list = [n[i:i + 3] for i in range( len(n), 3)]
    for i, num in enumerate():
        for _ in range()):
            num = num.lstrip()
            if len() == 1:
                if () > 1 or (len(sum_list) == 1 and len(sum_list[0]) == 3)) and i == len(sum_list) - 1 and (word[-1] in large_sum_words or hundred in word[-1]):
                    word.append()
                word.append()
                num = num[]
            if len() == 2:
                if num[] != '0':
                    if () > 1 or (len(sum_list) == 1 and len(sum_list[0]) == 3)) and i == len(sum_list) - 1:
                        word.append()
                    if num.startswith():
                        if int() in range(3):
                            word.append()])
                            number = one_digit_words[num[1]][1 if int() in range(3, 6, 2) else 0] 
                            word.append())
                        word.append() in range(2, 6) else 0] + ("ty " if num[0] != '8' else 'y ') + (one_digit_words[num[1]][0] if num[1] != '0' else ""))
                    num = num[]
            if len() == 3:
                if num[] != '0':
                    word.append()
                    if num[] == '00': break
                num = num[]
        if len() > 1 and not skip:
            word.append() - 2])
    word = " ".join( word))
            n = input()
            int()
