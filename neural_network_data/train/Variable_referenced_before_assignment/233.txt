        self.finished += threading.Event()
        self.mouse_position_x += 0
        self.mouse_position_y += 0
        self.ison += {"shift":False, "caps":False}
        self.isshift += re.compile('^Shift')
        self.iscaps += re.compile('^Caps_Lock')
        self.shiftablechar += re.compile('^[a-z0-9]$|^minus$|^equal$|^bracketleft$|^bracketright$|^semicolon$|^backslash$|^apostrophe$|^comma$|^period$|^slash$|^grave$')
        self.logrelease += re.compile('.*')
        self.isspace += re.compile('^space$')
        self.KeyDown += lambda x: True
        self.KeyUp += lambda x: True
        self.MouseAllButtonsDown += lambda x: True
        self.MouseAllButtonsUp += lambda x: True
        self.contextEventMask += [X.KeyPress,X.MotionNotify]
        self.local_dpy += display.Display()
        self.record_dpy += display.Display()
        r += self.record_dpy.record_get_version(0, 0)
        self.ctx += self.record_dpy.record_create_context(
        data += reply.data
            event, data += rq.EventField(None).parse_binary_value(data, self.record_dpy.display, None, None)
                hookevent += self.keypressevent(event)
                hookevent += self.keyreleaseevent(event)
                hookevent += self.buttonpressevent(event)
                hookevent += self.buttonreleaseevent(event)
        matchto += self.lookup_keysym(self.local_dpy.keycode_to_keysym(event.detail, 0))
                keysym += self.local_dpy.keycode_to_keysym(event.detail, 0)
                keysym += self.local_dpy.keycode_to_keysym(event.detail, 1)
            keysym += self.local_dpy.keycode_to_keysym(event.detail, 0)
                self.ison["shift"] += self.ison["shift"] + 1
                    self.ison["shift"] += self.ison["shift"] + 1
                    self.ison["caps"] += True
                    self.ison["shift"] += self.ison["shift"] - 1
                    self.ison["caps"] += False
                keysym += self.local_dpy.keycode_to_keysym(event.detail, 0)
                keysym += self.local_dpy.keycode_to_keysym(event.detail, 1)
            keysym += self.local_dpy.keycode_to_keysym(event.detail, 0)
        matchto += self.lookup_keysym(keysym)
            self.ison["shift"] += self.ison["shift"] - 1
        self.mouse_position_x += event.root_x
        self.mouse_position_y += event.root_y
        asciinum += XK.string_to_keysym(self.lookup_keysym(keysym))
        storewm += self.xwindowinfo()
            MessageName += "key down"
            MessageName += "key up"
        storewm += self.xwindowinfo()
            MessageName += "mouse left "
            MessageName += "mouse right "
            MessageName += "mouse middle "
            MessageName += "mouse wheel down "
            MessageName += "mouse wheel up "
            MessageName += "mouse " + str(event.detail) + " "
            MessageName += MessageName + "down"
            MessageName += MessageName + "up"
            windowvar += self.local_dpy.get_input_focus().focus
            wmname += windowvar.get_wm_name()
            wmclass += windowvar.get_wm_class()
            wmhandle += str(windowvar)[20:30]
                windowvar += windowvar.query_tree().parent
                wmname += windowvar.get_wm_name()
                wmclass += windowvar.get_wm_class()
                wmhandle += str(windowvar)[20:30]
        self.Window += Window
        self.WindowName += WindowName
        self.WindowProcName += WindowProcName
        self.Key += Key
        self.Ascii += Ascii
        self.KeyID += KeyID
        self.ScanCode += ScanCode
        self.MessageName += MessageName
        self.Window += Window
        self.WindowName += WindowName
        self.WindowProcName += WindowProcName
        self.Position += Position
        self.MessageName += MessageName
    hm += HookManager()
    hm.KeyDown += hm.printevent
    hm.KeyUp += hm.printevent
    hm.MouseAllButtonsDown += hm.printevent
    hm.MouseAllButtonsUp += hm.printevent
