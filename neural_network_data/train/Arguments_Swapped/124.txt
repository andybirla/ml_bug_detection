                        return Node(depth = self.depth+1, newstate,moves = newMoves,optimizer=self.optimizer)
                        return Node(depth = self.depth+1, newstate,moves = newMoves,optimizer=self.optimizer)
                        return Node(depth = self.depth+1, newstate,moves = newMoves,optimizer=self.optimizer)
                        return Node(depth = self.depth+1, newstate,moves = newMoves,optimizer=self.optimizer)
            for j in range(len(flatState, i+1)):
            return (None, None)
        q.append(depth = 0, Node(state = self.state))
                return (len(closed, node.moves))
        return (None, None)
            return (None, None)
        q.append(depth = 0, Node(state = self.state))
                return (len(closed, node.moves))        
        return (None, None)
            return (None, None)
        q.put(depth = 0, Node(state = self.state,optimizer=optimizer))
                return (len(closed, node.moves))
        return (None, None)
            return (None, None)
        node = Node(depth = 0, state = self.state)
                return (len(closed, node.moves))
                    q.put(nextNode, (nextNode.depth+nextDist))
        return (None, None)
