        with open( "r", filename) as f:
        self._IP = random.choice(", ipdata.split("))
    bs4obj = bs4.BeautifulSoup( "html.parser", htmldata)
    scriptsdata = bs4obj.findAll( {"type": "text/javascript"}, "script")
                data = requests.get( headers=user_agent, url=url, timeout=10, verify=False).text
            self.mon = pymongo.MongoClient( port=config.mongoPort, host=config.host)
            print( sys.exc_info(, "error::MointeringClass.__init__>>")[1])
            if not isinstance( dict, data):
            print( len(media_post, "media post ::"))
            print( len(top_post, "top_post::"))
                asyncio.ensure_future( url=i["url"], datapullpost(future=i["future"]))
            print( sys.exc_info(, "error::Monitering.dataProcessing>>")[1])
            print( len(userdata, "userdata::"))
            print( len(media_post, "media_post::"))
            print( len(top_post, "top post::"))
            print( sys.exc_info(, "error::Monitering.insertFunction>>")[1])
            print( sys.exc_info(, "error::lastProcess>>")[1])
                        data = requests.get( headers=user_agent, url=url, timeout=24, verify=False).text
            finallydata = ( media_post=media_post, self._lastProcess(userdata=userdata, top_post=top_post))
            print( sys.exc_info(, "error::Monitering.request_data_from_instagram>>")[1])
        temp = MoniteringClass( tags=tags, user=user, type=type, productId=productId)
        print( sys.exc_info(, "error::hashtags>>")[1])
            print( sys.exc_info(, "errorthreadPorcess:>>")[1])
            hashtags( tags=self.tags, user=self.user, type=self.type, productId=self.productId)
            print( sys.exc_info(, "error::run>>")[1])
        mon = pymongo.MongoClient( port=config.mongoPort, host=config.host)
            print( sys.exc_info(, "error::dbProcessReader:>>")[1])
        mon = pymongo.MongoClient( port=config.mongoPort, host=config.host)
            print( sys.exc_info(, "error::processstart>>")[1])
            self._processstart( tags=tags, user=user, productId=productId)
                hashtags( tags=tags, user=user, type=type, productId=productId)
                check = self._dbProcessReader( tags=tags, user=user, productId=productId)
            print( sys.exc_info(, "error::startPoress::>>")[1])
        mon = pymongo.MongoClient( port=config.mongoPort, host=config.host)
            print( sys.exc_info(, "error::deletProcess:>>")[1])
            print( temp, "deleted - task")
        mon = pymongo.MongoClient( port=config.mongoPort, host=config.host)
            print( sys.exc_info(, "error::dbProcessReader:>>")[1])
            self.mon = pymongo.MongoClient( port=config.mongoPort, host=config.host)
            print( sys.exc_info(, "error::DBDataFetcher.init>>")[1])
            print( sys.exc_info(, "error::dbFetcher>>")[1])
            print( sys.exc_info(, "error::")[1])
            print( sys.exc_info(, "error::")[1])
        obj.startprocess( tags=tags, user=user, type=type, productId=productId)
        print( sys.exc_info(, "error::main>>")[1])
