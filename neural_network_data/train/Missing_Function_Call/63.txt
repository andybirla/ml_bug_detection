            renamed_file = (" ", "_")
            (os.path.join(cd, extra_path, file), os.path.join(cd, extra_path, renamed_file))
    return ' (map(str.capitalize, file[:-4].split('_')))
        user_set_time = (map(lambda x: str(x).zfill(2), input("\nSet the alarm time (e.g. 01:10): ").split(":")))
        if (r"^[0-9]{2}:[0-9]{2}$", user_set_time):
            (">>> Error: Time format invalid! Please try again!\n")
    cd = (os.path.realpath(__file__))
    musics_path = (cd, "musics")
    (cd, os.listdir(musics_path), "musics")
    musics = (musics_path)
    if (musics) < 1:
        (">>> Error: No music in the musics folder! Please add music first!\n")
        ()
    elif (musics) == 1:
                ("\nSelect any alarm music:\n")
                for i in (1, len(musics) + 1):
                    (f"{i}. {clean_filename(musics[i - 1])}")
                user_input = (input("\nEnter the index of the listed musics (e.g. 1): "))
                (">> Alarm music has been set --> "+ clean_filename(selected_music))
                (">>> Error: Invalid Index! Please try again!\n")
    (f"\n>>> Alarm has been set successfully for {user_set_time}! Please dont close the program! <<<")
        current_time = (datetime.datetime.now().time())
            (('cmd', '/C', 'start', f"{cd}\\musics\\{selected_music}"))
            (">>> Alarm ringing! Closing the program!! Bye Bye!!! <<<")
    ("")
    ("###########################".center(os.get_terminal_size().columns))
    (f"###### {header} ######".center(os.get_terminal_size().columns))
    ("###########################".center(os.get_terminal_size().columns))
    ("Alarm Program")
    ()