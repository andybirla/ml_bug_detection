class (object):
        filename = () + "/" + "ipList.txt"
        with (filename, "r") as f:
            ipdata = ()
        self._IP = (ipdata.split(","))
            return (url)
    bs4obj = (htmldata, "html.parser")
    scriptsdata = ("script", {"type": "text/javascript"})
    datajson = ("{(.*)}", datatext)
    datadict = (datajson)
        ()
            (url)
            ()
                data = (url=url, headers=user_agent, timeout=10, verify=False).text
        data = await (url)
    data = await (htmldata=data)
    (data)
class ():
            self.mon = (host=config.host, port=config.mongoPort)
            ("error::MointeringClass.__init__>>", sys.exc_info()[1])
        loop = ()
            if not (data, dict):
            ("media post ::", len(media_post))
            ("top_post::", len(top_post))
                (tempdict)
                (tempdict)
                i["future"] = ()
                (i["future"])
                (datapullpost(future=i["future"], url=i["url"]))
            (asyncio.wait(futures))
                i["data"] = ()
            ("error::Monitering.dataProcessing>>", sys.exc_info()[1])
            ("userdata::", len(userdata))
            ("media_post::", len(media_post))
            ("top post::", len(top_post))
            records = ({"id": record["id"]})
            if () == 0:
                (record)
            ("error::Monitering.insertFunction>>", sys.exc_info()[1])
                        tempdict = ()
                        (tempdict)
                        (tempdict.copy())
                        tempdict = ()
                        (tempdict)
                        (tempdict.copy())
            ("error::lastProcess>>", sys.exc_info()[1])
                ()
                    (url)
                    ()
                        data = (url=url, headers=user_agent, timeout=24, verify=False).text
                data = (self._url)
            datadict = (data)
            userdata, media_post, top_post = (datadict)
            finallydata =(self._lastProcess(userdata=userdata, media_post=media_post, top_post=top_post))
            ("error::Monitering.request_data_from_instagram>>", sys.exc_info()[1])
        ()
        temp = (user=user, tags=tags, type=type, productId=productId)
        ()
        ("error::hashtags>>", sys.exc_info()[1])
class (multiprocessing.Process):
            (self)
            ("errorthreadPorcess:>>", sys.exc_info()[1])
            (user=self.user, tags=self.tags, type=self.type, productId=self.productId)
            ("error::run>>", sys.exc_info()[1])
class ():
        mon = (host=config.host, port=config.mongoPort)
            records = (temp).count()
            ("error::dbProcessReader:>>", sys.exc_info()[1])
            ()
        mon = (host=config.host, port=config.mongoPort)
            (temp)
            ("error::processstart>>", sys.exc_info()[1])
            ()
            (user=user, tags=tags, productId=productId)
                (user=user, tags=tags, type=type, productId=productId)
                check = (user=user, tags=tags, productId=productId)
                (check)
                (300)
            ("error::startPoress::>>", sys.exc_info()[1])
        mon = (host=config.host, port=config.mongoPort)
            (temp)
            ("error::deletProcess:>>", sys.exc_info()[1])
            ()
            ("deleted - task", temp)
        mon = (host=config.host, port=config.mongoPort)
            records = (temp).count()
            ("error::dbProcessReader:>>", sys.exc_info()[1])
            ()
class ():
            self.mon = (host=config.host, port=config.mongoPort)
            ("error::DBDataFetcher.init>>", sys.exc_info()[1])
            records = ().sort("id", -1).limit(limit)
                (i)
            ("error::dbFetcher>>", sys.exc_info()[1])
            return (mainlist)
            if () == False and date.isdigit() == False:
            limit = (limit)
            date = (date)
                doc = ({"date": {"$gt": date}}).sort("date", pymongo.ASCENDING).limit(limit)
                doc = ().sort("date", pymongo.ASCENDING).limit(limit)
                (i)
            ("error::", sys.exc_info()[1])
            return (postval)
            if () == False and date.isdigit() == False:
            limit = (limit)
            date = (date)
            doc = ({"date": {"$lt": date}}).limit(limit).sort("date", pymongo.DESCENDING)
                (i)
            ("error::", sys.exc_info()[1])
            return (postval)
        ()
        obj = ()
        (user=user, tags=tags, type=type, productId=productId)
        ("error::main>>", sys.exc_info()[1])
    ()
