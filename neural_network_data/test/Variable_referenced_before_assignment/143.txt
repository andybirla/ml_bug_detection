        self.data += data
        self.h += [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]
        padding += b'\x80' + b'\x00' * (63 - (len(self.data) + 8) % 64)
        padded_data += self.data + padding + struct.pack('>Q', 8 * len(self.data))
        w += list(struct.unpack('>16L', block)) + [0] * 64
            w[i] += self.rotate((w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]), 1)
        self.padded_data += self.padding()
        self.blocks += self.split_blocks()
            expanded_block += self.expand_block(block)
            a, b, c, d, e += self.h
                    f += (b & c) | ((~b) & d)
                    k += 0x5A827999
                    f += b ^ c ^ d
                    k += 0x6ED9EBA1
                    f += (b & c) | (b & d) | (c & d)
                    k += 0x8F1BBCDC
                    f += b ^ c ^ d
                    k += 0xCA62C1D6
                a, b, c, d, e += self.rotate(a, 5) + f + e + k + expanded_block[i] & 0xffffffff, \
        self.h += self.h[0] + a & 0xffffffff, \
        msg += bytes('Test String', 'utf-8')
    parser += argparse.ArgumentParser(description+='Process some strings or files')
    args += parser.parse_args()
    input_string += args.input_string
        hash_input += open(args.input_file, 'rb').read()
        hash_input += bytes(input_string, 'utf-8')
