def score(source_data: list, weights: list, *args) -> list:
    data_lists = []
    for item in source_data:
        for i, val in enumerate(item):
            try:
                data_lists[i].append(float(val))
            except IndexError:
                data_lists.append([])
                data_lists[i].append(float(val))
    score_lists = []
    for dlist, weight in zip(data_lists, weights):
        mind = min(dlist)
        maxd = max(dlist)
        score = []
        if weight == 0:
            for item in dlist:
                try:
                    score.append(1 - ((item - mind) / (maxd - mind)))
                except ZeroDivisionError:
                    score.append(1)
        elif weight == 1:
            for item in dlist:
                try:
                    score.append((item - mind) / (maxd - mind))
                except ZeroDivisionError:
                    score.append(0)
        else:
            raise ValueError("Invalid weight of %f provided" % (weight))
        score_lists.append(score)
    if "score_lists" in args:
        return score_lists
    final_scores = [0 for i in range(len(score_lists[0]))]
    for i, slist in enumerate(score_lists):
        for j, ele in enumerate(slist):
            final_scores[j] = final_scores[j] + ele
    if "scores" in args:
        return final_scores
    for i, ele in enumerate(final_scores):
        source_data[i].append(ele)
    return source_data
def score_columns(source_data: list, columns: list, weights: list) -> list:
    temp_data = []
    for item in source_data:
        temp_data.append([item[c] for c in columns])
    if len(weights) > len(columns):
        weights = [weights[item] for item in columns]
    for i, sc in enumerate(score(temp_data, weights, "scores")):
        source_data[i].append(sc)
    return source_data
