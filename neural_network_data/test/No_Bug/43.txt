import math
import pickle
from colorama import Fore, Style
switcher = {
    'r': Fore.RED,
    'bk': Fore.BLACK,
    'b': Fore.BLUE,
    'g': Fore.GREEN,
    'y': Fore.YELLOW,
    'm': Fore.MAGENTA,
    'c': Fore.CYAN,
    'w': Fore.WHITE
}
def paint(str, color='r'):
    if color in switcher:
        str = switcher[color] + str + Style.RESET_ALL
    return str
TAG = paint('TF-IDF-GENE/', 'b')
def find_tf_idf(file_names=['./../test/testdata'], prev_file_path=None, dump_path=None):
    tf_idf = []  # will hold a dict of word_count for every doc(line in a doc in this case)
    idf = {}
    if prev_file_path:
        print(TAG, 'modifying over exising file.. @', prev_file_path)
        idf, tf_idf = pickle.load(open(prev_file_path, 'rb'))
        prev_doc_count = len(idf)
        prev_corpus_length = len(tf_idf)
    for f in file_names:
        file1 = open(f, 'r')  # never use 'rb' for textual data, it creates something like,  {b'line-inside-the-doc'}
        for line in file1:
            dict = {}
            for i in set(line.split()):
                if i in idf:
                    idf[i] += 1
                else:
                    idf[i] = 1
            for word in line.split():
                if word not in dict:
                    dict[word] = 1
                else:
                    dict[word] += 1
            tf_idf.append(dict)
        file1.close()
    for doc in tf_idf:
        for key in doc:
            true_idf = math.log(len(tf_idf) / idf[key])
            true_tf = doc[key] / len(doc)
            doc[key] = true_tf * true_idf
    print(TAG, 'Total number of unique words in corpus', len(idf),
          '( ' + paint('++' + str(len(idf) - prev_doc_count), 'g') + ' )' if prev_file_path else '')
    print(TAG, 'Total number of docs in corpus:', len(tf_idf),
          '( ' + paint('++' + str(len(tf_idf) - prev_corpus_length), 'g') + ' )' if prev_file_path else '')
    if dump_path:
        if dump_path[-8:] != 'tfidfpkl': raise Exception(
            TAG + "Please provide a .tfidfpkl file_path, it is the standard format of this module.")
        pickle.dump((idf, tf_idf), open(dump_path, 'wb'), protocol=pickle.HIGHEST_PROTOCOL)
        print(TAG, 'Dumping TF-IDF vars @', dump_path)
    return idf, tf_idf
