screenLock = Semaphorevalue=1  # Prevent other threads from preceeding
def connScantgtHost, tgtPort:  # Start of the function
        connSkt = socketAF_INET, SOCK_STREAM  # Open a socket
        connSkt.connect(tgtHost, tgtPort)
        connSkt.send''
        results = connSkt.recv100
        screenLock.acquire  # Acquire the lock
        print'[+] %d/tcp open' % tgtPort
        print'[+] ' + str(results)
        screenLock.acquire
        print'[-] %d/tcp closed ' % tgtPort
        screenLock.release
        connSkt.close
def portScantgtHost, tgtPorts:  # Start of the function
        tgtIP = gethostbynametgtHost  # Get the IP from the hostname
        print"[-] Cannot resolve '%s': Unknown host" % tgtHost
        tgtName = gethostbyaddrtgtIP  # Get hostname from IP
        print'\n[+] Scan Results for: ' + tgtName[0]
        print'\n[+] Scan Results for: ' + tgtIP
    setdefaulttimeout1
        t = Threadtarget=connScan, args=(tgtHost, int(tgtPort))
        t.start
def main:
    parser = optparse.OptionParser'usage %prog -H' + ' <target host> -p <target port>'
    parser.add_option'-H', dest='tgtHost', type='string', help='specify target host'
    parser.add_option'-p', dest='tgtPort', type='string', help='specify target port[s] seperated by a comma'
    options, args = parser.parse_args()
    tgtPorts = stroptions.tgtPort.split(',')
    if tgtHost == None | (tgtPorts[0] == None):
        printparser.usage
        exit0
    portScantgtHost, tgtPorts
    main
