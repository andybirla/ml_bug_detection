   def __init__(self, suit, rank):
       if (suit in SUITS) and (rank in RANKS):
           self.suit = suit
           self.rank = rank
       else:
           self.suit = None
           self.rank = None
           print(("Invalid card: ", suit, rank))
   def __str__(self):
       return self.suit + self.rank
   def get_suit(self):
       return self.suit
   def get_rank(self):
       return self.rank
   def draw(self, canvas, pos):
       card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank),
                   CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
       canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]],
                         CARD_SIZE)
   ans = string + " contains "
   for i in range(len(string_list)):
       ans += str(string_list[i]) + " "
   return ans
   def __init__(self):
       self.hand = []
   def __str__(self):
       return string_list_join("Hand", self.hand)
   def add_card(self, card):
       self.hand.append(card)
   def get_value(self):
       var = []
       self.hand_value = 0
       for card in self.hand:
           card = str(card)
           if card[1] in VALUES:
               self.hand_value += VALUES[card[1]]
               var.append(card[1])
       if 'A' not in var:
           return self.hand_value
       if self.hand_value + 10 <= 21:
           return self.hand_value + 10
       else:
           return self.hand_value
   def draw(self, canvas, pos):
       for card in self.hand:
           card = str(card)
           Card(card[0], card[1]).draw(canvas, pos)
           pos[0] += 36
   def __init__(self):
       self.Deck = [Card(suit, rank) for suit in SUITS for rank in RANKS]
   def shuffle(self):
       random.shuffle(self.Deck)
   def deal_card(self):
       return random.choice(self.Deck)
   def __str__(self):
       return string_list_join("Deck", self.Deck)
   global outcome, in_play, score1, score2, player_card, dealer_card, deck
   outcome = ""
   player_card = Hand()
   dealer_card = Hand()
   deck = Deck()
   for i in range(2):
       player_card.add_card(deck.deal_card())
       dealer_card.add_card(deck.deal_card())
   in_play = True
   score1 = str(player_card.get_value())
   score2 = str(dealer_card.get_value())
   if in_play == True:
       while dealer_card.get_value() < 17:
           dealer_card.add_card(deck.deal_card())
   if dealer_card.get_value() > 21:
       outcome = "you won!!"
   elif player_card.get_value() <= dealer_card.get_value():
       outcome = "you lose"
   else:
       outcome = "you won!!"
   score1 = str(player_card.get_value())
   score2 = str(dealer_card.get_value())
   global outcome, in_play, score1, score2, player_card, dealer_card, deck
   if in_play == True:
       player_card.add_card(deck.deal_card())
   if player_card.get_value() > 21:
       outcome = "you are busted"
       in_play = False
   score1 = str(player_card.get_value())
   score2 = str(dealer_card.get_value())
   canvas.draw_text(outcome, [250, 150], 25, 'White')
   canvas.draw_text("BlackJack", [250, 50], 40, 'Black')
   canvas.draw_text(score1, [100, 100], 40, 'Red')
   player_card.draw(canvas, [20, 300])
   dealer_card.draw(canvas, [300, 300])
   canvas.draw_text(score2, [400, 100], 40, 'Red')
