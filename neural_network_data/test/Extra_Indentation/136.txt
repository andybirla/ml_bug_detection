 import sys
 class Node:
         self.info = info
         self.left = None
         self.right = None
     def __str__(self):
         return str(self.info)
     def __del__(self):
         del self
 class BinarySearchTree:
         self.root = None
     def insert(self, val):
     if lower_lim is not None and node.info < lower_lim:
         return False
     if upper_lim is not None and node.info > upper_lim:
         return False
     is_left_bst = True
     is_right_bst = True
     if node.left is not None:
         is_left_bst = is_bst(node.left, lower_lim, node.info)
     if is_left_bst and node.right is not None:
         is_right_bst = is_bst(node.right, node.info, upper_lim)
     return is_left_bst and is_right_bst
 def postorder(node):
     if node is None:
         return
     if node.left:
         postorder(node.left)
     if node.right:
         postorder(node.right)
     print(node.info)
 def inorder(node):
     if node is None:
         return
     if node.left:
         inorder(node.left)
     print(node.info)
     if node.right:
         inorder(node.right)
 def preorder(node):
     if node is None:
         return
     print(node.info)
     if node.left:
         preorder(node.left)
     if node.right:
         preorder(node.right)
 def bfs(node):
     queue = []
     if node:
         queue.append(node)
     while queue != []:
         temp = queue.pop(0)
         print(temp.info)
         if temp.left:
             queue.append(temp.left)
         if temp.right:
             queue.append(temp.right)
 def preorder_itr(node):
     stack = [node]
     values = []
     while stack != []:
         temp = stack.pop()
         print(temp.info)
         values.append(temp.info)
         if temp.right:
             stack.append(temp.right)
         if temp.left:
             stack.append(temp.left)
     return values
 def inorder_itr(node):
     stack = []
     current = node
     while True:
         if current != None:
             stack.append(current)       # L
             current = current.left
         elif stack != []:
             temp = stack.pop()
             print(temp.info)            # N
             current = temp.right        # R
         else:
             break
 def postorder_itr(node):
     s1, s2 = [node], []
     while s1 != []:
         temp = s1.pop()
         s2.append(temp)
         if temp.left:
             s1.append(temp.left)
         if temp.right:
             s1.append(temp.right)
     print(*(s2[::-1]))
 def bst_frm_pre(pre_list):
     box = Node(pre_list[0])
     if len(pre_list) > 1:
         if len(pre_list) == 2:
             if pre_list[1] > pre_list[0]:
                 box.right = Node(pre_list[1])
             else:
                 box.left = Node(pre_list[1])
         else:
             all_less = False
             for i in range(1, len(pre_list)):
                 if pre_list[i] > pre_list[0]:
                     break
             else:
                 all_less = True
             if i != 1:
                 box.left = bst_frm_pre(pre_list[1 : i])
             if not all_less:
                 box.right = bst_frm_pre(pre_list[i:])
     return box
 def lca(t_node, c1, c2):
     if c1 == c2:
         return c1
     current = t_node
     while current:
         if c1 < current.info and c2 < current.info:
             current = current.left
         elif c1 > current.info and c2 > current.info:
             current = current.right
         else:
             return current.info
     return -1
 def vertical_middle_level(t_node):
     e = (t_node, 0)         # 0 indicates level 0, to left we have -ve and to right +ve
     queue = [e]
     ans = []
     while queue != []:
         temp, level = queue.pop(0)
         if level == 0:
             ans.append(str(temp.info))
         if temp.left:
             queue.append((temp.left, level - 1))
         if temp.right:
             queue.append((temp.right, level + 1))
     return ' '.join(ans)
 def get_level(n, val):
     c_level = 0
     while n.info != val:
         if val < n.info:
             n = n.left
         elif val > n.info:
             n = n.right
         c_level += 1
         if n is None:
             return -1 
     return c_level
 def depth(node):
     if node is None:
         return 0
     l_depth, r_depth = 0, 0
     if node.left:
         l_depth = depth(node.left)
     if node.right:
         r_depth = depth(node.right)
     return 1 + max(l_depth, r_depth)
 t = BinarySearchTree()
 t.insert(10)
 t.insert(5)
 t.insert(15)
 t.insert(3)
 t.insert(1)
 t.insert(0)
 t.insert(2)
 t.insert(7)
 t.insert(12)
 t.insert(18)
 t.insert(19)
 print(depth(t.root))
