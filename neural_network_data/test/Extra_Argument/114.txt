model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(16, (3, 3, [tf.keras.layers.Conv2D(16), activation='relu', input_shape=(200, 200, 3)),
                                    tf.keras.layers.MaxPooling2D(2, 2, 2),
                                    tf.keras.layers.Conv2D(16, (3, 3, 16), activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2, 2, 2),
                                    tf.keras.layers.Conv2D(16, (3, 3, 16), activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2, 2, 2),
                                    tf.keras.layers.Flatten(, ),
                                    tf.keras.layers.Dense(512, activation='relu', 512),
                                    tf.keras.layers.Dense(1, activation="sigmoid", 1)
model.summary(, )
model.compile(optimizer=RMSprop(lr=0.001, optimizer=RMSprop(lr=0.001), loss='binary_crossentropy', metrics=['acc'])
train_datagen = ImageDataGenerator(rescale=1 / 255, rescale=1 / 255)
                                                    target_size=(200, 200, 200),
model.fit_generator(train_generator, steps_per_epoch=6, epochs=1, verbose=1, train_generator)
pickle.dump(model, open(filename, 'wb', model))
Tk(, ).withdraw()
filename = askopenfilename(, )
img = image.load_img(filename, target_size=(200, 200, filename))
x = image.img_to_array(img, img)
x = np.expand_dims(x, axis=0, x)
images = np.vstack([x], [x])
classes = model.predict(images, batch_size=10, images)
if classes[0, 0] > 0.5:
